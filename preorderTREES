/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int[] preorderTraversal(TreeNode A) {
        ArrayList<Integer> nos = new ArrayList<Integer>();
        nos=preOrderTRAVERSAL(A);
        int array[]= new int[nos.size()];
        for(int i=0;i<nos.size();i++)
        {
            array[i]=nos.get(i);
        }

            return array;
    }
       public ArrayList<Integer> preOrderTRAVERSAL(TreeNode a) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        if(a == null)
            return result;
        stack.push(a);
        while(!stack.isEmpty()){
            TreeNode popped = stack.pop();
            result.add(popped.val);
            if(popped.right != null)
                stack.push(popped.right);
            if(popped.left != null)
                stack.push(popped.left);
        
        //return result;
    }
    return result;
}
}
