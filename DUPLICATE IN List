
M-1------O(nLogN) Solution due to Arrays.sort...
public class Solution {
	// DO NOT MODIFY THE LIST
	public int repeatedNumber(final List<Integer> a) {
	   int c[]= new int[a.size()];
	   int dup=-1;
      for(int i=0;i<a.size();i++)
      {
          c[i]=a.get(i);
      }
      Arrays.sort(c);
      for(int i=0;i<c.length-1;i++)
      {
          if(c[i]==c[i+1])
          {
              dup= c[i];
          }
      }
      return dup;
	}
}
M-2--------O(N), HashMap allows duplicates indexes and null values, 
on encountering the duplicacy , it replaces the previous one. If no mapping it returns null on get()......
public class Solution {
	// DO NOT MODIFY THE LIST
	public int repeatedNumber(final List<Integer> a) {
	    
	    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
	    
	    for (int i = 0; i < a.size(); i++){
	        if (map.get(a.get(i)) == null){
	            map.put(a.get(i), i);
	        }else{
	            return a.get(i);
	        }
	    }
	    
	    return -1;
	    
	}
}
M-3--------if array of length n with values between 0 to n-1.........
O(n), finding all duplicates

#include <iostream>
using namespace std;
 
// function to find repeating elements
void printRepeating( int arr[], int n)
{
    // First check all the values that are
    // present in an array then go to that
    // values as indexes and increment by
    // the size of array
    for (int i = 0; i < n; i++)
    {
        int index = arr[i] % n;
        arr[index] += n;
    }
 
    // Now check which value exists more
    // than once by dividing with the size
    // of array
    for (int i = 0; i < n; i++)
    {
        if ((arr[i]/n) > 1)
            cout << i << " ";
    }
}
 
// Driver's code
int main()
{
    int arr[] = {1, 6, 3, 1, 3, 6, 6};
    int arr_size = sizeof(arr)/sizeof(arr[0]);
 
    cout << "The repeating elements are: \n";
    printRepeating( arr, arr_size);
    return 0;
}
